package com.dmdev.lessons.lesson10.part2;

public class Task6 {
    public static void main(String[] args) {
//        long startTime = System.currentTimeMillis();//данный метод возвращает текущее время в миллисекундах
//        String value = "";
//        for (int i = 0; i < 100000; i++) {
//            value += 1;
//        }
//        long endTime = System.currentTimeMillis();
//        System.out.println(endTime - startTime);

        /**для конкантинации множества строк эффективнее использовать класс StringBuilder. String - это immutable-класс,
         * каждое изменение строки возвращает новую строку, и таким образом в коде выше создается 100000 новых строк.
         */
        long startTime2 = System.currentTimeMillis();//данный метод возвращает текущее время в миллисекундах
        StringBuilder value2 = new StringBuilder();
        for (int i = 0; i < 100000; i++) {
            value2.append(i);
        }
        long endTime2 = System.currentTimeMillis();
        System.out.println(endTime2 - startTime2);
/**
 * Принципиальная разница String и StringBuilder заключается в том, что массив объекта класса String полностью заполнен,
 * в объекте класса StringBuilder - нет. В классе StringBuilder есть поле Count, которое показывает заполненнсть массива.
 * Базово массив объекта класса StringBuilder имеет capacity = 16, далее в процессе заполнения при нехватке количества
 * свободных ячеек его длина увеличивается в 2 раза: происходит динамическое увеличение размера массива.
 * [0, 1, 2, 3, 4];
 * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
 * Каждый раз при добавлении в объект класса StringBuilder новой строки происходит проверка длинны массива на возможность
 * вставить новую строку. Только в том случае, если длинны на данный момент не хватает - длинна массива удваивается.
 * В итоге  это даёт большую производительность данного класса по сравнению с классом String.
 *
 * StringBuffer - аналог класса StringBuilder. Его основное отличие состоит в его потокобезопасности.
 * Все методы класса StringBuffer - синхронизированы - помечены модификатором synchronized.
 * Этот модификатор означает, что данный метод у одного и того же объекта может вызвать не более чем один поток
 * одновременно.
 * StringBuffer редко используется в условиях многопоточности, т.к. в основном объект класса StringBuilder -
 * это локальная переменная. Это безопасно для многопоточности, потому что каждый поток создает свою переменную value
 * и только он имеет доступ к ссылке value.
 */

    }
}
